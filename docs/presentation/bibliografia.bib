@misc {
    human_factor_on_software_engineering,
    author = {Cleison Carlos},
    howpublished = {\url{https://medium.com/trainingcenter/o-fator-humano-e-a-engenharia-de-software-9ba1cc9a3f54}},
    title = {O fator humano e a engenharia de software},
    note = {Acessado no dia 28 de novembro de 2023},
    year = {2017}
}

@inproceedings {
    classificacao_defeitos_ogc_historico,
    author = {Manhães, Marcelo Mota},
    booktitle = {Dissertação (Mestrado em Computação Aplicada) },
    title = {Classificação e resolução de defeitos em manutenção de software utilizando ODC e histórico de soluções},
    year = {2014},
    pages = {152},
    url = {http://repositorio.utfpr.edu.br/jspui/handle/1/1004}
}

@article {
    automated_tests_javascript,
    author = {Mariana Gregorio Candido},
    title = {Testes automatizados em aplicações client-side em JavaScript: uma análise compreensiva},
    year = {2022},
}

@article{
    automatic_odc_using_ml,
    title = {Automating orthogonal defect classification using machine learning algorithms},
    journal = {Future Generation Computer Systems},
    volume = {102},
    pages = {932-947},
    year = {2020},
    issn = {0167-739X},
    doi = {https://doi.org/10.1016/j.future.2019.09.009},
    url = {https://www.sciencedirect.com/science/article/pii/S0167739X19308283},
    author = {Fábio Lopes and João Agnelo and César A. Teixeira and Nuno Laranjeiro and Jorge Bernardino},
    keywords = {Software defects, Bug reports, Orthogonal defect classification, Machine learning, Text classification},
    abstract = {Software systems are increasingly being used in business or mission critical scenarios, where the presence of certain types of software defects, i.e., bugs, may result in catastrophic consequences (e.g., financial losses or even the loss of human lives). To deploy systems in which we can rely on, it is vital to understand the types of defects that tend to affect such systems. This allows developers to take proper action, such as adapting the development process or redirecting testing efforts (e.g., using a certain set of testing techniques, or focusing on certain parts of the system). Orthogonal Defect Classification (ODC) has emerged as a popular method for classifying software defects, but it requires one or more experts to categorize each defect in a quite complex and time-consuming process. In this paper, we evaluate the use of machine learning algorithms (k-Nearest Neighbors, Support Vector Machines, Naïve Bayes, Nearest Centroid, Random Forest and Recurrent Neural Networks) for automatic classification of software defects using ODC, based on unstructured textual bug reports. Experimental results reveal the difficulties in automatically classifying certain ODC attributes solely using reports, but also suggest that the overall classification accuracy may be improved in most of the cases, if larger datasets are used.}
}

@INPROCEEDINGS{
    ast_based_aproach_to_classifying_defects,
    author={Liu, Changsong and Zhao, Yangyang and Yang, Yibiao and Lu, Hongmin and Zhou, Yuming and Xu, Baowen},
    booktitle={2015 IEEE International Conference on Software Quality, Reliability and Security - Companion}, 
    title={An AST-Based Approach to Classifying Defects}, 
    year={2015},
    volume={},
    number={},
    pages={14-21},
    doi={10.1109/QRS-C.2015.15}
}

@INPROCEEDINGS{
    automatic_defect_categorization,
    author={Thung, Ferdian and Lo, David and Jiang, Lingxiao},
    booktitle={2012 19th Working Conference on Reverse Engineering}, 
    title={Automatic Defect Categorization}, 
    year={2012},
    volume={},
    number={},
    pages={205-214},
    doi={10.1109/WCRE.2012.30}
}
