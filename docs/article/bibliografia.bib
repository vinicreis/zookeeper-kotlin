@inproceedings{
    sandhof2006defeitos,
    title={Defeitos de software como erros humanos},
    author={Sandhof, Karen and Filgueiras, Lucia},
    booktitle={II Workshop Um olhar sociot{\'e}cnico sobre a Engenharia de Software (WOSES 2006)},
    year={2006},
    organization={sn}
}

@article {
    choosing_a_programming_language,
    author = {D. Spinellis},
    journal = {IEEE Software}, 
    title = {Choosing a programming language}, 
    year = {2006},
    volume = {23},
    number = {4},
    pages = {62-63},
    doi = {10.1109/MS.2006.97}
}

@misc {
    human_factor_on_software_engineering,
    author = {Cleison Carlos},
    howpublished = {\url{https://medium.com/trainingcenter/o-fator-humano-e-a-engenharia-de-software-9ba1cc9a3f54}},
    title = {O fator humano e a engenharia de software},
    note = {Acessado no dia 28 de novembro de 2023},
    year = {2017}
}

@article {
    prejuizos_com_softwares,
    title = {Prejuízo com softwares de baixa qualidade ultrapassa US\$ 2 trilhões},
    journal = {InforChannel},
    year = {2021},
    month = {January},
    url = {https://inforchannel.com.br/2021/01/06/prejuizo-com-softwares-de-baixa-qualidade-ultrapassa-us-2-trilhoes/},
    author = {Carlos Ossamu},
    keywords = {agile, cisq, cpsq, devops, software, synopsys},
}

@article {
    facebook_lost_millions_during_outage,
    title = {Facebook Lost About \$65 Million During Hours-Long Outage},
    journal = {Forbes},
    year = {2021},
    month = {October},
    url = {https://www.forbes.com/sites/abrambrown/2021/10/05/facebook-outage-lost-revenue/?sh=3ab146c0231a},
    author = {Abram Brown}
}

@inproceedings {
    root_cause_analysis_with_ml,
    author={
        Lal, Harsh 
        and Pahwa, Gaurav
    },
    booktitle={2017 7th International Conference on Cloud Computing, Data Science \& Engineering - Confluence},
    title={Root cause analysis of software bugs using machine learning techniques},
    year={2017},
    pages={105-111},
    doi={10.1109/CONFLUENCE.2017.7943132}
}

@inproceedings {
    classificacao_defeitos_ogc_historico,
    author = {Manhães, Marcelo Mota},
    booktitle = {Dissertação (Mestrado em Computação Aplicada) },
    title = {Classificação e resolução de defeitos em manutenção de software utilizando ODC e histórico de soluções},
    year = {2014},
    pages = {152},
    url = {http://repositorio.utfpr.edu.br/jspui/handle/1/1004}
}

@inproceedings {
    understanting_bohr_mandel_bugs,
    author = {Chillarege, Ram},
    booktitle = {2011 IEEE Third International Workshop on Software Aging and Rejuvenation}, 
    title = {Understanding Bohr-Mandel Bugs through ODC Triggers and a Case Study with Empirical Estimations of Their Field Proportion}, 
    year = {2011},
    volume = {},
    number = {},
    pages = {7-13},
    doi = {10.1109/WoSAR.2011.17}
}

@article {
    not_all_bugs_are_the_same,
    title = {Not all bugs are the same: Understanding, characterizing, and classifying bug types},
    journal = {Journal of Systems and Software},
    volume = {152},
    pages = {165-181},
    year = {2019},
    issn = {0164-1212},
    doi = {https://doi.org/10.1016/j.jss.2019.03.002},
    url = {https://www.sciencedirect.com/science/article/pii/S0164121219300536},
    author = {Gemma Catolino and Fabio Palomba and Andy Zaidman and Filomena Ferrucci},
    keywords = {Bug classification, Taxonomy, Empirical study},
    abstract = {Modern version control systems, e.g., GitHub, include bug tracking mechanisms that developers can use to highlight the presence of bugs. This is done by means of bug reports, i.e., textual descriptions reporting the problem and the steps that led to a failure. In past and recent years, the research community deeply investigated methods for easing bug triage, that is, the process of assigning the fixing of a reported bug to the most qualified developer. Nevertheless, only a few studies have reported on how to support developers in the process of understanding the type of a reported bug, which is the first and most time-consuming step to perform before assigning a bug-fix operation. In this paper, we target this problem in two ways: first, we analyze 1280 bug reports of 119 popular projects belonging to three ecosystems such as Mozilla, Apache, and Eclipse, with the aim of building a taxonomy of the types of reported bugs; then, we devise and evaluate an automated classification model able to classify reported bugs according to the defined taxonomy. As a result, we found nine main common bug types over the considered systems. Moreover, our model achieves high F-Measure and AUC-ROC (64\% and 74\% on overall, respectively).}
}

@article {
    automated_tests_javascript,
    author = {Mariana Gregorio Candido},
    title = {Testes automatizados em aplicações client-side em JavaScript: uma análise compreensiva},
    year = {2022},
}

@misc {
    scopus,
    title = {Site da Scopus},
    howpublished = {\url{https://www.scopus.com/home.uri}},
    note = {Acessado dia 27 de março de 2023},
    year = {2023},
    author = {Elsevier B.V.}
}

@article{
    automatic_odc_using_ml,
    title = {Automating orthogonal defect classification using machine learning algorithms},
    journal = {Future Generation Computer Systems},
    volume = {102},
    pages = {932-947},
    year = {2020},
    issn = {0167-739X},
    doi = {https://doi.org/10.1016/j.future.2019.09.009},
    url = {https://www.sciencedirect.com/science/article/pii/S0167739X19308283},
    author = {Fábio Lopes and João Agnelo and César A. Teixeira and Nuno Laranjeiro and Jorge Bernardino},
    keywords = {Software defects, Bug reports, Orthogonal defect classification, Machine learning, Text classification},
    abstract = {Software systems are increasingly being used in business or mission critical scenarios, where the presence of certain types of software defects, i.e., bugs, may result in catastrophic consequences (e.g., financial losses or even the loss of human lives). To deploy systems in which we can rely on, it is vital to understand the types of defects that tend to affect such systems. This allows developers to take proper action, such as adapting the development process or redirecting testing efforts (e.g., using a certain set of testing techniques, or focusing on certain parts of the system). Orthogonal Defect Classification (ODC) has emerged as a popular method for classifying software defects, but it requires one or more experts to categorize each defect in a quite complex and time-consuming process. In this paper, we evaluate the use of machine learning algorithms (k-Nearest Neighbors, Support Vector Machines, Naïve Bayes, Nearest Centroid, Random Forest and Recurrent Neural Networks) for automatic classification of software defects using ODC, based on unstructured textual bug reports. Experimental results reveal the difficulties in automatically classifying certain ODC attributes solely using reports, but also suggest that the overall classification accuracy may be improved in most of the cases, if larger datasets are used.}
}

@misc {
    ibm_odc,
    title = {Orthogonal Defect Classification (Archival) - IBM},
    howpublished = {\url{https://researcher.watson.ibm.com/researcher/view_group_subpage.php?id=5020}},
    note = {Acessado dia 29 de abril de 2023},
    year = {2023},
    author = {P. Santhanam}
}

@INPROCEEDINGS{
    definition_software_fault_emulation_operators,
    author={Duraes, J. and Madeira, H.},
    booktitle={2003 International Conference on Dependable Systems and Networks, 2003. Proceedings.}, 
    title={Definition of software fault emulation operators: a field data study}, 
    year={2003},
    volume={},
    number={},
    pages={105-114},
    doi={10.1109/DSN.2003.1209922}
}

@INPROCEEDINGS{
    ast_based_aproach_to_classifying_defects,
    author={Liu, Changsong and Zhao, Yangyang and Yang, Yibiao and Lu, Hongmin and Zhou, Yuming and Xu, Baowen},
    booktitle={2015 IEEE International Conference on Software Quality, Reliability and Security - Companion}, 
    title={An AST-Based Approach to Classifying Defects}, 
    year={2015},
    volume={},
    number={},
    pages={14-21},
    doi={10.1109/QRS-C.2015.15}
}

@INPROCEEDINGS{
    automatic_defect_categorization,
    author={Thung, Ferdian and Lo, David and Jiang, Lingxiao},
    booktitle={2012 19th Working Conference on Reverse Engineering}, 
    title={Automatic Defect Categorization}, 
    year={2012},
    volume={},
    number={},
    pages={205-214},
    doi={10.1109/WCRE.2012.30}
}

@article{
    mining_softare_repositories_for_defect_categorization,
    author = {Sakthi Kumaresh and Ramachandran Baskaran},
    title = {Mining Software Repositories for Defect Categorization},
    journal = {Journal of Communications Software and Systems},
    month = {3},
    year = {2015},
    volume = {11},
    number = {1},
    pages = {31--36},
    doi = {10.24138/jcomss.v11i1.115},
    url = {https://doi.org/10.24138/jcomss.v11i1.115}
}

@misc {
    kotlin_source,
    title = {JetBrains/kotlin: The Kotlin Programming Language},
    howpublished = {\url{https://github.com/JetBrains/kotlin}},
    note = {Acessado dia 30 de abril de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    kotlin_get_started,
    title = {Get started with Kotlin | Kotlin Documentation},
    howpublished = {\url{https://kotlinlang.org/docs/getting-started.html}},
    note = {Acessado dia 30 de abril de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    kotlin_nullable_types,
    title = {Basic syntax | Kotlin Documentation},
    howpublished = {\url{https://kotlinlang.org/docs/basic-syntax.html#nullable-values-and-null-checks}},
    note = {Acessado dia 30 de abril de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    kotlin_null_safety,
    title = {Null safety | Kotlin Documentation},
    howpublished = {\url{https://kotlinlang.org/docs/null-safety.html}},
    note = {Acessado dia 30 de abril de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    kotlin_variables,
    title = {Basic syntax | Kotlin Documentation},
    howpublished = {\url{https://kotlinlang.org/docs/basic-syntax.html#variables}},
    note = {Acessado dia 30 de abril de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    kotlin_arrays,
    title = {Arrays | Kotlin Documentation},
    howpublished = {\url{https://kotlinlang.org/docs/arrays.html}},
    note = {Acessado dia 30 de abril de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    kotlin_get_or_null,
    title = {getOrNull | Kotlin Programming Language},
    howpublished = {\url{https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-null.html}},
    note = {Acessado dia 30 de abril de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    kotlin_get_or_else,
    title = {getOrElse | Kotlin Programming Language},
    howpublished = {\url{https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/get-or-else.html}},
    note = {Acessado dia 30 de abril de 2023},
    year = {2023},
    author = {JetBrains}
}

@INPROCEEDINGS{
    analysing_linter_usage_and_warning,
    author={Heričko, Tjaša and Šumak, Boštjan},
    booktitle={2022 45th Jubilee International Convention on Information, Communication and Electronic Technology (MIPRO)}, 
    title={Analyzing Linter Usage and Warnings Through Mining Software Repositories: A Longitudinal Case Study of JavaScript Packages}, 
    year={2022},
    volume={},
    number={},
    pages={1375-1380},
    doi={10.23919/MIPRO55190.2022.9803554}
}

@misc {
    detekt_gettint_stated_gradle,
    title = {Run detekt using the Detekt Gradle Plugin},
    howpublished = {\url{https://detekt.dev/docs/gettingstarted/gradle}},
    note = {Acessado no dia 30 de abril de 2023},
    year = {2023},
    author = {detekt}
}

@misc {
    kotlin_coroutines,
    title = {Coroutines guide | Kotlin Documentation},
    howpublished = {\url{https://kotlinlang.org/docs/coroutines-guide.html}},
    note = {Acessado no dia 30 de abril de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    detekt_config,
    title = {Detekt Configuration File | detekt},
    howpublished = {\url{https://detekt.dev/docs/introduction/configurations}},
    note = {Acessado no dia 30 de abril de 2023},
    year = {2023},
    author = {detekt}
}

@misc {
    java_exception_definition,
    title = {What Is an Exception?},
    howpublished = {\url{https://docs.oracle.com/javase/tutorial/essential/exceptions/definition.html}},
    note = {Acessado no dia 03 de outubro de 2023},
    year = {2023},
    author = {Oracle}
}

@misc {
    java_catch_or_specify_requirement,
    title = {The Catch or Specify Requirement},
    howpublished = {\url{https://docs.oracle.com/javase/tutorial/essential/exceptions/catchOrDeclare.html}},
    note = {Acessado no dia 05 de outubro de 2023},
    year = {2023},
    author = {Oracle}
}

@misc {
    haskell_monads,
    title = {All About Monads - HaskellWiki},
    howpublished = {\url{https://wiki.haskell.org/All_About_Monads#What_is_a_monad.3F}},
    note = {Acessado no dia 09 de outubro de 2023},
    year = {2023},
    author = {HaskellWiki}
}

@misc {
    kotlin_when_expression,
    title = {Condition and loops - Kotlin Documentation},
    howpublished = {\url{https://kotlinlang.org/docs/control-flow.html#when-expression}},
    note = {Acessado no dia 10 de outubro de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    gradle_home,
    title = {Gradle Build Tool},
    howpublished = {\url{https://gradle.org}},
    note = {Acessado no dia 11 de novembro de 2023},
    year = {2023},
    author = {Gradle}
}

@misc {
    kotlin_home,
    title = {Kotlin Programming Language},
    howpublished = {\url{https://kotlinlang.org/}},
    note = {Acessado no dia 11 de novembro de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    apache_zookeeper_home,
    title = {Apache ZooKeeper},
    howpublished = {\url{https://zookeeper.apache.org/}},
    note = {Acessado no dia 11 de novembro de 2023},
    year = {2023},
    author = {Apache}
}

@misc {
    coodesh_code_smell,
    title = {O que é Code Smell?},
    howpublished = {\url{https://coodesh.com/blog/dicionario/o-que-e-code-smell/}},
    note = {Acessado no dia 11 de novembro de 2023},
    year = {2023},
    author = {Gizele Silva}
}

@misc {
    crashlytics_home,
    title = {Crashlytics App Crash \& Stability Reporting | Firebase},
    howpublished = {\url{https://firebase.google.com/products/crashlytics}},
    note = {Acessado no dia 13 de novembro de 2023},
    year = {2023},
    author = {Google}
}

@misc {
    okta_backend_as_a_service,
    title = {What is BaaS (Backend as a Service)? Definition and Usage},
    howpublished = {\url{https://www.okta.com/identity-101/baas-backend-as-a-service/}},
    note = {Acessado no dia 27 de novembro de 2023},
    year = {2023},
    author = {Okta}
}

@misc {
    detekt_complex_condition_rule,
    title = {ComplexCondition | Complexity Rule Set | detekt},
    howpublished = {\url{https://detekt.dev/docs/rules/complexity#complexcondition}},
    note = {Acessado no dia 28 de novembro de 2023},
    year = {2023},
    author = {detekt}
}

@misc{
    android_corroutines_test_best_practices,
    title = {Best practices for corroutines in Android | Kotlin | Android},
    howpublished = {\url{https://developer.android.com/kotlin/coroutines/coroutines-best-practices#inject-dispatchers}},
    note = {Acessado no dia 28 de novembro de 2023},
    year = {2023},
    author = {Google}
}

@misc {
    detekt_too_generic_exception_caught_rule,
    title = {TooGenericExceptionCaught | Exceptions Rule Set | detekt},
    howpublished = {\url{https://detekt.dev/docs/rules/exceptions#toogenericexceptioncaught}},
    note = {Acessado no dia 28 de novembro de 2023},
    year = {2023},
    author = {detekt}
}

@misc {
    kotlin_code_conventions,
    title = {Coding conventions | Kotlin Documentation},
    howpublished = {\url{https://kotlinlang.org/docs/coding-conventions.html}},
    note = {Acessado no dia 28 de novembro de 2023},
    year = {2023},
    author = {JetBrains}
}

@misc {
    detekt_unsafe_call_on_nullable_rule,
    title = {UnsafeCallOnNullableType | Potential-bugs Rule Set | detekt},
    howpublished = {\url{https://detekt.dev/docs/rules/potential-bugs#unsafecallonnullabletype}},
    note = {Acessado no dia 28 de novembro de 2023},
    year = {2023},
    author = {detekt}
}

@misc {
    detekt_new_line_at_end_of_file_rule,
    title = {NewLineAtEndOfFile | Style Rule Set | detekt},
    howpublished = {\url{https://detekt.dev/docs/rules/style#newlineatendoffile}},
    note = {Acessado no dia 28 de novembro de 2023},
    year = {2023},
    author = {detekt}
}
